package jetbrains.charisma.smartui.content; // major change on the top

/*Generated by MPS */

import jetbrains.mps.webr.runtime.templateComponent.TemplateComponent;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.teamsys.dnq.runtime.events.IEntityListener;
import java.util.Map;
import jetbrains.mps.webr.runtime.templateComponent.TemplateActionController;
import jetbrains.mps.webr.runtime.templateComponent.TemplateEventHandler;
import jetbrains.mps.webr.runtime.templateComponent.FakeTemplateComponent;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import webr.framework.textBuilder.TBuilderContext;
import jetbrains.charisma.smartui.dto.IssueRequestDataHolder;
import jetbrains.exodus.entitystore.Entity;
import com.jetbrains.teamsys.dnq.database.EntityOperations;
import jetbrains.charisma.smartui.persistent.IssueChangeImpl;
import webr.framework.controller.ControllerOperations;
import jetbrains.mps.webr.runtime.requestProcessor.WindowManager;
import jetbrains.teamsys.dnq.runtime.events.EventsMultiplexer;
import jetbrains.mps.webr.runtime.util.ParameterUtil;
import jetbrains.mps.webr.htmlComponent.runtime.HtmlComponentUtil;
import webr.framework.function.HtmlStringUtil;
import jetbrains.mps.internationalization.runtime.Localizer;
import jetbrains.springframework.configuration.runtime.ServiceLocator;
import jetbrains.charisma.persistent.IssueImpl;
import jetbrains.teamsys.dnq.runtime.util.DnqUtils;
import jetbrains.mps.webr.runtime.converter.TypeConvertManager;
import jetbrains.exodus.util.StringHashMap;
import jetbrains.charisma.smartui.fullScreenIssue.IssueSubcontent_HtmlTemplateComponent;
import jetbrains.charisma.service.UserProfileService;
import jetbrains.charisma.main.CurrentUserResidence;
import jetbrains.charisma.smartui.panel.tags.TagsPanel_HtmlTemplateComponent;
import jetbrains.charisma.smartui.inplaceIssueEdit.EditIssue_HtmlTemplateComponent;
import jetbrains.charisma.smartui.filter.FilterData;
import jetbrains.charisma.smartui.issueDetailLevel.ViewIssueNew_HtmlTemplateComponent;
import jetbrains.charisma.persistence.user.UserImpl;
import jetbrains.youtrack.core.security.Operation;
import jetbrains.mps.webr.runtime.requestProcessor.ResponseFactory;
import jetbrains.mps.webr.runtime.util.ContentBuilder;
import jetbrains.teamsys.dnq.runtime.txn._Txn;
import jetbrains.charisma.smartui.panel.attachment.AttachmentPanel_HtmlTemplateComponent;
import jetbrains.mps.webr.runtime.templateComponent.Widget;
import jetbrains.mps.webr.runtime.component.HtmlTemplate;
import jetbrains.mps.webr.javascript.runtime.escape.JsStringUtil;
import jetbrains.charisma.workflow.exceptions.FieldRequiredException;
import jetbrains.charisma.smartui.fullScreenIssue.VerticalProperties_HtmlTemplateComponent;

public class IssueItem_HtmlTemplateComponent extends TemplateComponent {
  protected static Log log = LogFactory.getLog(IssueItem_HtmlTemplateComponent.class);

  private IEntityListener listener;
  private boolean hasError;
  private boolean focused;
  private boolean summaryMode;

  public IssueItem_HtmlTemplateComponent(TemplateComponent parentTemplateComponent, String templateName, Map<String, Object> templateParameters) {
    super(null, parentTemplateComponent, templateName, templateParameters);
  }

  public IssueItem_HtmlTemplateComponent(TemplateComponent parentTemplateComponent, String templateName) {
    super(null, parentTemplateComponent, templateName);
  }

  public IssueItem_HtmlTemplateComponent(TemplateActionController templateActionController, String templateName, Map<String, Object> templateParameters) {
    super(templateActionController, null, templateName, templateParameters);
  }

  public IssueItem_HtmlTemplateComponent(TemplateActionController templateActionController, TemplateComponent parentTemplateComponent, String templateName, Map<String, Object> templateParameters) {
    super(templateActionController, parentTemplateComponent, templateName, templateParameters);
  }

  public IssueItem_HtmlTemplateComponent(Map<String, Object> templateParameters) {
    super(null, null, "IssueItem", templateParameters);
  }

  public IssueItem_HtmlTemplateComponent() {
    super(null, null, "IssueItem");
  }

  protected void initEventHandlers() {
    IssueItem_HtmlTemplateComponent.this.addEventHandler(new TemplateEventHandler(FakeTemplateComponent.getChild(FakeTemplateComponent.getChild(FakeTemplateComponent.getChild(FakeTemplateComponent.getChild(IssueItem_HtmlTemplateComponent.this, "vi"), "ip"), "t"), "ct").getWidget("toggleCommentsDiv").getEventName("click"), new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        IssueItem_HtmlTemplateComponent.this.toggleComments();
      }
    }));
    IssueItem_HtmlTemplateComponent.this.addEventHandler(new TemplateEventHandler(FakeTemplateComponent.getChild(FakeTemplateComponent.getChild(FakeTemplateComponent.getChild(IssueItem_HtmlTemplateComponent.this, "vi"), "cs"), "ac").getWidget("closeCommentsLink").getEventName("click"), new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        IssueItem_HtmlTemplateComponent.this.toggleComments();
      }
    }));
    this.beforeRenderHandler = new _FunctionTypes._void_P1_E0<TBuilderContext>() {
      public void invoke(TBuilderContext builderContext) {
        final IssueRequestDataHolder dto = IssueRequestDataHolder.get();
        summaryMode = dto.isSummaryMode(((Entity) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("searchRequest")));
        if (EntityOperations.equals(((Entity) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("issueChange")), null)) {
          IssueItem_HtmlTemplateComponent.this.getTemplateParameters().put("issueChange", IssueChangeImpl.getIssueChange(dto.getMe(), ((Entity) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("issue"))));
        }
      }
    };
    this.addEventHandler(new TemplateEventHandler(this.getEventPath("methodCall_toggleExpandIssue")) {
      public void handle() {
        IssueItem_HtmlTemplateComponent.this.toggleExpandIssue(ControllerOperations.getEventParameter("__param__marked", Boolean.class));
      }
    });
  }

  protected void onEnter() {
    if (this.getTemplateParameters().get("descriptionExpanded") == null) {
      this.getTemplateParameters().put("descriptionExpanded", false);
    }
    if (this.getTemplateParameters().get("commentsExpanded") == null) {
      this.getTemplateParameters().put("commentsExpanded", false);
    }
    if (this.getTemplateParameters().get("historyExpanded") == null) {
      this.getTemplateParameters().put("historyExpanded", false);
    }
    if (this.getTemplateParameters().get("edit") == null) {
      this.getTemplateParameters().put("edit", false);
    }
    if (this.getTemplateParameters().get("mark") == null) {
      this.getTemplateParameters().put("mark", false);
    }
    if (this.getTemplateParameters().get("draggable") == null) {
      this.getTemplateParameters().put("draggable", false);
    }
    if (this.getTemplateParameters().get("ponaehal") == null) {
      this.getTemplateParameters().put("ponaehal", false);
    }
    if (this.getTemplateParameters().get("allowRegularUiUpdate") == null) {
      this.getTemplateParameters().put("allowRegularUiUpdate", false);
    }
    if (IssueRequestDataHolder.get().isSummaryMode(((Entity) this.getTemplateParameters().get("searchRequest")))) {
      this.getTemplateParameters().put("commentsExpanded", false);
    }
    IssueItem_HtmlTemplateComponent.this.listener = new IssueItemListener(IssueItem_HtmlTemplateComponent.this, WindowManager.getWindowManager().getRequestWindowId());
    EventsMultiplexer.getInstance().addListener(((Entity) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("issue")), IssueItem_HtmlTemplateComponent.this.listener);
  }

  protected void onDestroy() {
    try {
      EventsMultiplexer.removeListenerSafe(((Entity) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("issue")), IssueItem_HtmlTemplateComponent.this.listener);
    } finally {
      super.onDestroy();
    }
  }

  protected void renderTemplate(Map<String, Object> rootMap, final TBuilderContext builderContext) {
    {
      String id = ParameterUtil.getParameterString("id", builderContext.getCurrentTemplateComponent().getFullLabeledInputName("issueContainer"));
      this.setRefreshElementId(id);
      if (this.tryRenderHidden(rootMap, builderContext, id)) {
        return;
      }
    }
    builderContext.appendIndent();
    builderContext.append("<div");
    builderContext.append(" cn=\"");
    builderContext.append(builderContext.getCurrentTemplateComponent().getRefPath("issueContainer"));
    builderContext.append("\"");
    HtmlComponentUtil.addTemplateParamAttributes(builderContext);
    builderContext.append(" id=\"");
    builderContext.append(HtmlStringUtil.html(builderContext.checkId("id", builderContext.getCurrentTemplateComponent().getFullLabeledInputName("issueContainer"))));
    builderContext.append("\"");
    builderContext.append(" title=\"");
    builderContext.append(HtmlStringUtil.html((((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("ponaehal")) ?
      ((Localizer) ServiceLocator.getBean("localizer")).localizedMsg("IssueItem.This_issue_does_not_match_a_search_criteria", builderContext) :
      ""
    )));
    builderContext.append("\"");
    builderContext.append(" class=\"");
    if (!(((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("edit")))) {
      builderContext.append("issueContainer");
    }
    builderContext.append(" ");
    if (summaryMode) {
      builderContext.append("issueContainer_oneline");
    }
    builderContext.append(" ");
    if (((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("ponaehal"))) {
      builderContext.append("issue-unrelated");
    }
    builderContext.append(" sort-item ");
    if (((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("descriptionExpanded"))) {
      builderContext.append("issue-expanded");
    }
    builderContext.append(" ");
    if (((IssueImpl) DnqUtils.getPersistentClassInstance(((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")), "Issue")).isResolved(((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")))) {
      builderContext.append("resolved");
    }
    builderContext.append(" ");
    if (focused) {
      builderContext.append("issue-selected");
    }
    builderContext.append(" ");
    builderContext.append(HierarchyUtil.getLevelStyle(((Integer) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issueLevel"))));
    builderContext.append(" ");
    if (((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("mark"))) {
      builderContext.append("marked");
    }
    builderContext.append(" ");
    if (((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("edit"))) {
      builderContext.append("listEditIssue");
    }
    builderContext.append("\"");
    builderContext.append(" iid=\"");
    builderContext.append(HtmlStringUtil.html(((TypeConvertManager) ServiceLocator.getBean("typeConvertManager")).toString(((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")))));
    builderContext.append("\"");
    builderContext.append(">");
    builderContext.appendNewLine();
    builderContext.increaseIndent();
    if (((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("edit"))) {
      builderContext.appendIndent();
      builderContext.append("<div class=\"editMode\">");
      builderContext.appendNewLine();
      builderContext.increaseIndent();
      {
        TemplateComponent childTemplateComponent;
        {
          final Map<String, Object> childTemplateParameters = new StringHashMap<Object>();
          childTemplateParameters.put("issue", ((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")));
          childTemplateParameters.put("fsi", true);
          childTemplateParameters.put("onProjectChange", ((IssueItem_HtmlTemplateComponent) builderContext.getCurrentTemplateComponent()).projectChange());
          childTemplateParameters.put("onFlipProperties", ((IssueItem_HtmlTemplateComponent) builderContext.getCurrentTemplateComponent()).onFlipProperties());
          childTemplateParameters.put("allowRegularUiUpdate", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("allowRegularUiUpdate")));
          TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
          if (currentTemplateComponent != null) {
            String childTemplateName = "s";
            childTemplateComponent = builderContext.getOldChildTemplateComponent(childTemplateName);
            if (childTemplateComponent == null) {
              // Create child template
              childTemplateComponent = new IssueSubcontent_HtmlTemplateComponent(currentTemplateComponent, childTemplateName, childTemplateParameters);
            } else {
              // Update child template
              childTemplateComponent.setTemplateParameters(childTemplateParameters);
            }
          } else {
            childTemplateComponent = new IssueSubcontent_HtmlTemplateComponent(null, null, null, childTemplateParameters);
          }
          childTemplateComponent.setRefName("s");
        }
        TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
        if (currentTemplateComponent != null) {
          currentTemplateComponent.addChildTemplateComponent(childTemplateComponent.getTemplateName(), childTemplateComponent);
        }
        TemplateComponent.buildTemplateComponent(childTemplateComponent, builderContext);
      }
      builderContext.appendIndent();
      builderContext.append("<div class=\"center\">");
      builderContext.appendNewLine();
      builderContext.increaseIndent();
      if (!(((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("allowRegularUiUpdate")))) {
        {
          TemplateComponent childTemplateComponent;
          {
            final Map<String, Object> childTemplateParameters = new StringHashMap<Object>();
            childTemplateParameters.put("issue", ((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")));
            childTemplateParameters.put("folder", ((UserProfileService) ServiceLocator.getBean("userProfileService")).getGeneralUserProfile(CurrentUserResidence.getResident()).getFilterFolder());
            childTemplateParameters.put("fsi", true);
            childTemplateParameters.put("allowRegularUiUpdate", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("allowRegularUiUpdate")));
            childTemplateParameters.put("css", "tag-list_fsi");
            TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
            if (currentTemplateComponent != null) {
              String childTemplateName = "tp";
              childTemplateComponent = builderContext.getOldChildTemplateComponent(childTemplateName);
              if (childTemplateComponent == null) {
                // Create child template
                childTemplateComponent = new TagsPanel_HtmlTemplateComponent(currentTemplateComponent, childTemplateName, childTemplateParameters);
              } else {
                // Update child template
                childTemplateComponent.setTemplateParameters(childTemplateParameters);
              }
            } else {
              childTemplateComponent = new TagsPanel_HtmlTemplateComponent(null, null, null, childTemplateParameters);
            }
            childTemplateComponent.setRefName("tp");
          }
          TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
          if (currentTemplateComponent != null) {
            currentTemplateComponent.addChildTemplateComponent(childTemplateComponent.getTemplateName(), childTemplateComponent);
          }
          TemplateComponent.buildTemplateComponent(childTemplateComponent, builderContext);
        }
      }
      {
        TemplateComponent childTemplateComponent;
        {
          final Map<String, Object> childTemplateParameters = new StringHashMap<Object>();
          childTemplateParameters.put("issue", ((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")));
          childTemplateParameters.put("onEditFinish", ((IssueItem_HtmlTemplateComponent) builderContext.getCurrentTemplateComponent()).onEditFinish());
          childTemplateParameters.put("refreshProperties", ((IssueItem_HtmlTemplateComponent) builderContext.getCurrentTemplateComponent()).refreshProperties());
          childTemplateParameters.put("allowRegularUiUpdate", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("allowRegularUiUpdate")));
          TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
          if (currentTemplateComponent != null) {
            String childTemplateName = "ei";
            childTemplateComponent = builderContext.getOldChildTemplateComponent(childTemplateName);
            if (childTemplateComponent == null) {
              // Create child template
              childTemplateComponent = new EditIssue_HtmlTemplateComponent(currentTemplateComponent, childTemplateName, childTemplateParameters);
            } else {
              // Update child template
              childTemplateComponent.setTemplateParameters(childTemplateParameters);
            }
          } else {
            childTemplateComponent = new EditIssue_HtmlTemplateComponent(null, null, null, childTemplateParameters);
          }
          childTemplateComponent.setRefName("ei");
        }
        TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
        if (currentTemplateComponent != null) {
          currentTemplateComponent.addChildTemplateComponent(childTemplateComponent.getTemplateName(), childTemplateComponent);
        }
        TemplateComponent.buildTemplateComponent(childTemplateComponent, builderContext);
      }
      builderContext.decreaseIndent();
      builderContext.appendIndent();
      builderContext.append("</div>");
      builderContext.appendNewLine();
      builderContext.decreaseIndent();
      builderContext.appendIndent();
      builderContext.append("</div>");
      builderContext.appendNewLine();//minor in the middle
    } else {
      {
        TemplateComponent childTemplateComponent;
        {
          final Map<String, Object> childTemplateParameters = new StringHashMap<Object>();
          childTemplateParameters.put("issue", ((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")));
          childTemplateParameters.put("issueChange", ((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issueChange")));
          childTemplateParameters.put("filterData", ((FilterData) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("filterData")));
          childTemplateParameters.put("descriptionExpanded", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("descriptionExpanded")));
          childTemplateParameters.put("commentsExpanded", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("commentsExpanded")));
          childTemplateParameters.put("draggable", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("draggable")));
          childTemplateParameters.put("summaryMode", summaryMode);
          childTemplateParameters.put("attachmentActions", ((TemplateComponent) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("attachActions")));
          childTemplateParameters.put("allowRegularUiUpdate", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("allowRegularUiUpdate")));
          TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
          if (currentTemplateComponent != null) {
            String childTemplateName = "vi";
            childTemplateComponent = builderContext.getOldChildTemplateComponent(childTemplateName);
            if (childTemplateComponent == null) {
              // Create child template
              childTemplateComponent = new ViewIssueNew_HtmlTemplateComponent(currentTemplateComponent, childTemplateName, childTemplateParameters);
            } else {
              // Update child template
              childTemplateComponent.setTemplateParameters(childTemplateParameters);
            }
          } else {
            childTemplateComponent = new ViewIssueNew_HtmlTemplateComponent(null, null, null, childTemplateParameters);
          }
          childTemplateComponent.setRefName("vi");
        }
        TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
        if (currentTemplateComponent != null) {
          currentTemplateComponent.addChildTemplateComponent(childTemplateComponent.getTemplateName(), childTemplateComponent);
        }
        TemplateComponent.buildTemplateComponent(childTemplateComponent, builderContext);
      }
    }
    builderContext.decreaseIndent();
    builderContext.appendIndent();
    builderContext.append("</div>");
    builderContext.appendNewLine();
  }

  protected void doBuildComponentTree(Map<String, Object> rootMap, final TBuilderContext builderContext) {
    if (((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("edit"))) {
      {
        TemplateComponent childTemplateComponent;
        {
          final Map<String, Object> childTemplateParameters = new StringHashMap<Object>();
          childTemplateParameters.put("issue", ((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")));
          childTemplateParameters.put("fsi", true);
          childTemplateParameters.put("onProjectChange", ((IssueItem_HtmlTemplateComponent) builderContext.getCurrentTemplateComponent()).projectChange());
          childTemplateParameters.put("onFlipProperties", ((IssueItem_HtmlTemplateComponent) builderContext.getCurrentTemplateComponent()).onFlipProperties());
          childTemplateParameters.put("allowRegularUiUpdate", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("allowRegularUiUpdate")));
          TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
          if (currentTemplateComponent != null) {
            String childTemplateName = "s";
            childTemplateComponent = builderContext.getOldChildTemplateComponent(childTemplateName);
            if (childTemplateComponent != null) {
              // Update child template
              childTemplateComponent.setTemplateParameters(childTemplateParameters);
            } else {
              // Create child template
              childTemplateComponent = new IssueSubcontent_HtmlTemplateComponent(currentTemplateComponent, childTemplateName, childTemplateParameters);
            }
            currentTemplateComponent.addChildTemplateComponent(childTemplateComponent.getTemplateName(), childTemplateComponent);
          } else {
            childTemplateComponent = new IssueSubcontent_HtmlTemplateComponent(childTemplateParameters);
          }
        }
        TemplateComponent.buildComponentTree(childTemplateComponent, builderContext);
      }
      if (!(((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("allowRegularUiUpdate")))) {
        {
          TemplateComponent childTemplateComponent;
          {
            final Map<String, Object> childTemplateParameters = new StringHashMap<Object>();
            childTemplateParameters.put("issue", ((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")));
            childTemplateParameters.put("folder", ((UserProfileService) ServiceLocator.getBean("userProfileService")).getGeneralUserProfile(CurrentUserResidence.getResident()).getFilterFolder());
            childTemplateParameters.put("fsi", true);
            childTemplateParameters.put("allowRegularUiUpdate", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("allowRegularUiUpdate")));
            childTemplateParameters.put("css", "tag-list_fsi");
            TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
            if (currentTemplateComponent != null) {
              String childTemplateName = "tp";
              childTemplateComponent = builderContext.getOldChildTemplateComponent(childTemplateName);
              if (childTemplateComponent != null) {
                // Update child template
                childTemplateComponent.setTemplateParameters(childTemplateParameters);
              } else {
                // Create child template
                childTemplateComponent = new TagsPanel_HtmlTemplateComponent(currentTemplateComponent, childTemplateName, childTemplateParameters);
              }
              currentTemplateComponent.addChildTemplateComponent(childTemplateComponent.getTemplateName(), childTemplateComponent);
            } else {
              childTemplateComponent = new TagsPanel_HtmlTemplateComponent(childTemplateParameters);
            }
          }
          TemplateComponent.buildComponentTree(childTemplateComponent, builderContext);
        }
      }
      {
        TemplateComponent childTemplateComponent;
        {
          final Map<String, Object> childTemplateParameters = new StringHashMap<Object>();
          childTemplateParameters.put("issue", ((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")));
          childTemplateParameters.put("onEditFinish", ((IssueItem_HtmlTemplateComponent) builderContext.getCurrentTemplateComponent()).onEditFinish());
          childTemplateParameters.put("refreshProperties", ((IssueItem_HtmlTemplateComponent) builderContext.getCurrentTemplateComponent()).refreshProperties());
          childTemplateParameters.put("allowRegularUiUpdate", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("allowRegularUiUpdate")));
          TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
          if (currentTemplateComponent != null) {
            String childTemplateName = "ei";
            childTemplateComponent = builderContext.getOldChildTemplateComponent(childTemplateName);
            if (childTemplateComponent != null) {
              // Update child template
              childTemplateComponent.setTemplateParameters(childTemplateParameters);
            } else {
              // Create child template
              childTemplateComponent = new EditIssue_HtmlTemplateComponent(currentTemplateComponent, childTemplateName, childTemplateParameters);
            }
            currentTemplateComponent.addChildTemplateComponent(childTemplateComponent.getTemplateName(), childTemplateComponent);
          } else {
            childTemplateComponent = new EditIssue_HtmlTemplateComponent(childTemplateParameters);
          }
        }
        TemplateComponent.buildComponentTree(childTemplateComponent, builderContext);
      }
    } else {
      {
        TemplateComponent childTemplateComponent;
        {
          final Map<String, Object> childTemplateParameters = new StringHashMap<Object>();
          childTemplateParameters.put("issue", ((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issue")));
          childTemplateParameters.put("issueChange", ((Entity) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("issueChange")));
          childTemplateParameters.put("filterData", ((FilterData) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("filterData")));
          childTemplateParameters.put("descriptionExpanded", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("descriptionExpanded")));
          childTemplateParameters.put("commentsExpanded", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("commentsExpanded")));
          childTemplateParameters.put("draggable", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("draggable")));
          childTemplateParameters.put("summaryMode", summaryMode);
          childTemplateParameters.put("attachmentActions", ((TemplateComponent) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("attachActions")));
          childTemplateParameters.put("allowRegularUiUpdate", ((Boolean) builderContext.getCurrentTemplateComponent().getTemplateParameters().get("allowRegularUiUpdate")));
          TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
          if (currentTemplateComponent != null) {
            String childTemplateName = "vi";
            childTemplateComponent = builderContext.getOldChildTemplateComponent(childTemplateName);
            if (childTemplateComponent != null) {
              // Update child template
              childTemplateComponent.setTemplateParameters(childTemplateParameters);
            } else {
              // Create child template
              childTemplateComponent = new ViewIssueNew_HtmlTemplateComponent(currentTemplateComponent, childTemplateName, childTemplateParameters);
            }
            currentTemplateComponent.addChildTemplateComponent(childTemplateComponent.getTemplateName(), childTemplateComponent);
          } else {
            childTemplateComponent = new ViewIssueNew_HtmlTemplateComponent(childTemplateParameters);
          }
        }
        TemplateComponent.buildComponentTree(childTemplateComponent, builderContext);
      }
    }
  }

  private void toggleExpandIssue(boolean marked) {
    IssueItem_HtmlTemplateComponent.this.getTemplateParameters().put("mark", marked);
    if (((Boolean) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("descriptionExpanded"))) {
      IssueItem_HtmlTemplateComponent.this.collapseDescription();
    } else {
      IssueItem_HtmlTemplateComponent.this.expandDescription();
    }
  }

  public void toggleEditMode() {
    ((UserImpl) DnqUtils.getPersistentClassInstance(CurrentUserResidence.getResident(), "User")).checkAccess(new _FunctionTypes._return_P1_E0<Boolean, Entity>() {
      public Boolean invoke(Entity it) {
        return ((IssueImpl) DnqUtils.getPersistentClassInstance(((Entity) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("issue")), "Issue")).isAccessible(Operation.UPDATE, ((Entity) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("issue")));
      }
    }, ((Localizer) ServiceLocator.getBean("localizer")).localizedMsg("IssueItem_TemplateController.You_have_no_access_rights_to_edit_this_issue"), CurrentUserResidence.getResident());
    this.getTemplateParameters().put("edit", !(((Boolean) this.getTemplateParameters().get("edit"))));
    IssueItem_HtmlTemplateComponent.this.refreshIssue(false, true);
    IssueItem_HtmlTemplateComponent.this.addCommandResponse(ResponseFactory.getJsResponseFactory().getEvalResponse(ContentBuilder.toString(new _FunctionTypes._void_P1_E0<TBuilderContext>() {
      public void invoke(TBuilderContext builderContext) {
        builderContext.appendIndent();
        builderContext.appendIndent();
        builderContext.append("issues.toggleEditMode(");
        builderContext.append(Boolean.toString(((Boolean) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("edit"))));
        builderContext.append(");");
        builderContext.appendNewLine();
        builderContext.appendNewLine();
      }
    }, false, IssueItem_HtmlTemplateComponent.this)));
  }

  private void expandDescription() {
    _Txn.run(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        IssueChangeImpl.touch(CurrentUserResidence.getResident(), ((Entity) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("issue")));
        return;
      }
    });
    IssueItem_HtmlTemplateComponent.this.getTemplateParameters().put("descriptionExpanded", true);
    IssueItem_HtmlTemplateComponent.this.refreshIssue(false, true);
  }

  private void collapseDescription() {
    IssueItem_HtmlTemplateComponent.this.getTemplateParameters().put("descriptionExpanded", false);
    IssueItem_HtmlTemplateComponent.this.getTemplateParameters().put("commentsExpanded", false);
    IssueItem_HtmlTemplateComponent.this.refreshIssue(false, true);
  }

  public void toggleComments() {
    this.getTemplateParameters().put("commentsExpanded", !(((Boolean) this.getTemplateParameters().get("commentsExpanded"))));
    // Refresh issue and set focus to it. 
    IssueItem_HtmlTemplateComponent.this.refreshIssue(false, true);
  }

  public void refreshIssue(boolean outlineLastAttachment, boolean focus) {
    if (outlineLastAttachment) {
      if (((Boolean) this.getTemplateParameters().get("edit"))) {
        AttachmentPanel_HtmlTemplateComponent.set$OutlineLast(((AttachmentPanel_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(((EditIssue_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(IssueItem_HtmlTemplateComponent.this).get("ei"))).get("atch")), true);
      } else {
        if (((Boolean) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("descriptionExpanded"))) {
          AttachmentPanel_HtmlTemplateComponent.set$OutlineLast(((AttachmentPanel_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(((ViewIssueNew_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(IssueItem_HtmlTemplateComponent.this).get("vi"))).get("atchs")), true);
        }
      }
    }
    IssueItem_HtmlTemplateComponent.this.redrawIssue(focus);
    ((_FunctionTypes._void_P1_E0<? super Entity>) this.getTemplateParameters().get("issueRefreshed")).invoke(((Entity) this.getTemplateParameters().get("issue")));
  }

  /*package*/ void redrawIssue(final Boolean focus) {
    if (log.isDebugEnabled()) {
      log.debug("[" + ((IssueImpl) DnqUtils.getPersistentClassInstance(((Entity) this.getTemplateParameters().get("issue")), "Issue")).getId(((Entity) this.getTemplateParameters().get("issue"))) + "] Redraw. Focus: " + focus);
    }
    if (((FilterData) this.getTemplateParameters().get("filterData")) != null) {
      // clear cached issue properties information 
      ((FilterData) this.getTemplateParameters().get("filterData")).clearUserObjects();
    }
    if (((ViewIssueNew_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(IssueItem_HtmlTemplateComponent.this).get("vi")) != null) {
      ((ViewIssueNew_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(IssueItem_HtmlTemplateComponent.this).get("vi")).getTemplateParameters().put("descriptionExpanded", ((Boolean) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("descriptionExpanded")));
    }
    IssueItem_HtmlTemplateComponent.this.focused = focus;
    Widget.addCommandResponseSafe(IssueItem_HtmlTemplateComponent.this, HtmlTemplate.refresh(IssueItem_HtmlTemplateComponent.this));
    IssueItem_HtmlTemplateComponent.this.addCommandResponse(ResponseFactory.getJsResponseFactory().getEvalResponse(ContentBuilder.toString(new _FunctionTypes._void_P1_E0<TBuilderContext>() {
      public void invoke(TBuilderContext builderContext) {
        builderContext.appendIndent();
        builderContext.appendIndent();
        builderContext.append("var editMode = ");
        builderContext.append(Boolean.toString(((Boolean) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("edit"))));
        builderContext.append(";");
        builderContext.appendNewLine();
        builderContext.appendIndent();
        builderContext.append("editMode && $(cr.findGlobal(\"");
        builderContext.append(JsStringUtil.stringLiteral(Widget.getWidgetId(TemplateComponent.getWidget(builderContext.getCurrentTemplateComponent(), "issueContainer"))));
        builderContext.append("\", [])).children().show();");
        builderContext.appendNewLine();
        builderContext.appendIndent();
        builderContext.append("var item = commonController.issueRedrawn(\"");
        builderContext.append(JsStringUtil.stringLiteral(((TypeConvertManager) ServiceLocator.getBean("typeConvertManager")).toString(((Entity) IssueItem_HtmlTemplateComponent.this.getTemplateParameters().get("issue")))));
        builderContext.append("\", ");
        builderContext.append(Boolean.toString(focus));
        builderContext.append(", editMode);");
        builderContext.appendNewLine();
        builderContext.appendNewLine();
      }
    }, false, IssueItem_HtmlTemplateComponent.this)));
  }

  public void closeIssue() {
    this.getTemplateParameters().put("descriptionExpanded", false);
    this.getTemplateParameters().put("commentsExpanded", false);
    this.getTemplateParameters().put("historyExpanded", false);
    this.getTemplateParameters().put("edit", false);
    IssueItem_HtmlTemplateComponent.this.redrawIssue(false);
  }

  public _FunctionTypes._void_P1_E0<? super Boolean> onEditFinish() {
    final IssueItem_HtmlTemplateComponent t = IssueItem_HtmlTemplateComponent.this;
    return new _FunctionTypes._void_P1_E0<Boolean>() {
      public void invoke(Boolean submit) {
        if (submit) {
          ((UserImpl) DnqUtils.getPersistentClassInstance(CurrentUserResidence.getResident(), "User")).checkAccess(new _FunctionTypes._return_P1_E0<Boolean, Entity>() {
            public Boolean invoke(Entity it) {
              return ((IssueImpl) DnqUtils.getPersistentClassInstance(((Entity) t.getTemplateParameters().get("issue")), "Issue")).isAccessible(Operation.UPDATE, it, ((Entity) t.getTemplateParameters().get("issue")));
            }
          }, ((Localizer) ServiceLocator.getBean("localizer")).localizedMsg("IssueItem_TemplateController.You_have_no_rights_to_update_this_issues"), CurrentUserResidence.getResident());
          (DnqUtils.getCurrentTransientSession()).flush();
        } else {
          (DnqUtils.getCurrentTransientSession()).revert();
        }
        t.toggleEditMode();
      }
    };
  }

  private void setIssueSavedState(final FieldRequiredException fre) {
    if (fre != null) {
      IssueItem_HtmlTemplateComponent.this.addCommandResponse(ResponseFactory.getJsResponseFactory().getEvalResponse(ContentBuilder.toString(new _FunctionTypes._void_P1_E0<TBuilderContext>() {
        public void invoke(TBuilderContext builderContext) {
          builderContext.appendIndent();
          builderContext.appendIndent();
          builderContext.append("var mainDiv = $(cr.findGlobal(\"");
          builderContext.append(JsStringUtil.stringLiteral(Widget.getWidgetId(TemplateComponent.getWidget(builderContext.getCurrentTemplateComponent(), "issueContainer"))));
          builderContext.append("\", []));");
          builderContext.appendNewLine();
          builderContext.appendIndent();
          builderContext.append("if (mainDiv.children(\".\" + \"issue-is-not-saved\").empty()) {");
          builderContext.appendNewLine();
          builderContext.increaseIndent();
          builderContext.appendIndent();
          builderContext.append("mainDiv.prepend(\"");
          builderContext.saveBuffer();
          builderContext.append("<div");
          builderContext.append(" class=\"issue-is-not-saved\"");
          builderContext.append(">");
          ((Localizer) ServiceLocator.getBean("localizer")).localizedMsgForTemplateContent("IssueItem_TemplateController.Issue_is_not_saved_{message}", builderContext, fre.getMessage());
          builderContext.append("</div>");
          builderContext.restoreBuffer(HtmlStringUtil.EscapeKind.ESCAPE_STRING_LITERAL);
          builderContext.append("\");");
          builderContext.appendNewLine();
          builderContext.decreaseIndent();
          builderContext.appendIndent();
          builderContext.append("}");
          builderContext.appendNewLine();
          builderContext.appendNewLine();
          builderContext.appendNewLine();
        }
      }, false, IssueItem_HtmlTemplateComponent.this)));
    } else {
      IssueItem_HtmlTemplateComponent.this.addCommandResponse(ResponseFactory.getJsResponseFactory().getEvalResponse(ContentBuilder.toString(new _FunctionTypes._void_P1_E0<TBuilderContext>() {
        public void invoke(TBuilderContext builderContext) {
          builderContext.appendIndent();
          builderContext.appendIndent();
          builderContext.append("var mainDiv = $(cr.findGlobal(\"");
          builderContext.append(JsStringUtil.stringLiteral(Widget.getWidgetId(TemplateComponent.getWidget(builderContext.getCurrentTemplateComponent(), "issueContainer"))));
          builderContext.append("\", []));");
          builderContext.appendNewLine();
          builderContext.appendIndent();
          builderContext.append("mainDiv.children(\".\" + \"issue-is-not-saved\").remove();");
          builderContext.appendNewLine();
          builderContext.appendNewLine();
        }
      }, false, IssueItem_HtmlTemplateComponent.this)));
    }
  }

  public _FunctionTypes._void_P1_E0<? super Boolean> refreshProperties() {
    return new _FunctionTypes._void_P1_E0<Boolean>() {
      public void invoke(Boolean r) {
        Widget.addCommandResponseSafe(((VerticalProperties_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(((IssueSubcontent_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(IssueItem_HtmlTemplateComponent.this).get("s"))).get("vp")), HtmlTemplate.refresh(((VerticalProperties_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(((IssueSubcontent_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(IssueItem_HtmlTemplateComponent.this).get("s"))).get("vp"))));
      }
    };
  }

  private _FunctionTypes._void_P0_E0 projectChange() {
    return new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        IssueItem_HtmlTemplateComponent.this.refreshIssue(false, true);
      }
    };
  }

  private _FunctionTypes._void_P0_E0 onFlipProperties() {
    return new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        Widget.addCommandResponseSafe(((IssueSubcontent_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(IssueItem_HtmlTemplateComponent.this).get("s")), HtmlTemplate.refresh(((IssueSubcontent_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(IssueItem_HtmlTemplateComponent.this).get("s"))));
        IssueItem_HtmlTemplateComponent.this.addCommandResponse(ResponseFactory.getJsResponseFactory().getEvalResponse(ContentBuilder.toString(new _FunctionTypes._void_P1_E0<TBuilderContext>() {
          public void invoke(TBuilderContext builderContext) {
            builderContext.appendIndent();
            builderContext.appendIndent();
            builderContext.append("$(\".issues-toolbar\").toggleClass(\"toolbar_left-pos\");");
            builderContext.appendNewLine();
            builderContext.appendNewLine();
          }
        }, false, IssueItem_HtmlTemplateComponent.this)));
      }
    };
  }
}
